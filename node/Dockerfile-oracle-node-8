FROM asg1612/alpine-oracle-instantclient

ENV LANG=C.UTF-8

RUN apk update \
	&& apk upgrade \
	&& apk add --no-cache --virtual .build-deps1 imagemagick imagemagick-dev graphicsmagick graphicsmagick-dev

# 修改为国内镜像源
RUN echo "http://mirrors.aliyun.com/alpine/v3.7/main/" > /etc/apk/repositories

# ENV VERSION=v4.9.1 NPM_VERSION=2
# ENV VERSION=v6.14.2 NPM_VERSION=3
ENV VERSION=v8.11.3 NPM_VERSION=5 YARN_VERSION=latest
# ENV VERSION=v10.4.1 NPM_VERSION=6 YARN_VERSION=latest

# For base builds
# ENV CONFIG_FLAGS="--fully-static --without-npm" DEL_PKGS="libstdc++" RM_DIRS=/usr/include

RUN apk add --no-cache --virtual .build-deps2 curl make gcc g++ python linux-headers binutils-gold gnupg libstdc++

RUN for server in ipv4.pool.sks-keyservers.net keyserver.pgp.com ha.pool.sks-keyservers.net; do \
        gpg --keyserver $server --recv-keys \
          94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
          FD3A5288F042B6850C66B31F09FE44734EB7990E \
          71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
          DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
          C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
          B9AE9905FFD7803F25714661B63B535A4C206CA9 \
          56730D5401028683275BD23C23EFEFE93C4CFFFE \
          77984A986EBC2AA786BC0F66B01FBB92821C587A && break; \
      done && \
      curl -sfSLO https://nodejs.org/dist/${VERSION}/node-${VERSION}.tar.xz && \
      curl -sfSL https://nodejs.org/dist/${VERSION}/SHASUMS256.txt.asc | gpg --batch --decrypt | \
        grep " node-${VERSION}.tar.xz\$" | sha256sum -c | grep ': OK$' && \
      tar -xf node-${VERSION}.tar.xz && \
      cd node-${VERSION} && \
      ./configure --prefix=/usr ${CONFIG_FLAGS} && \
      make -j$(getconf _NPROCESSORS_ONLN) && \
      make install && \
      cd / && \
      if [ -z "$CONFIG_FLAGS" ]; then \
        if [ -n "$NPM_VERSION" ]; then \
          npm install -g npm@${NPM_VERSION}; \
        fi; \
        find /usr/lib/node_modules/npm -name test -o -name .bin -type d | xargs rm -rf; \
      fi

RUN if [ -z "$CONFIG_FLAGS" ]; then \
        if [ -n "$YARN_VERSION" ]; then \
          for server in ipv4.pool.sks-keyservers.net keyserver.pgp.com ha.pool.sks-keyservers.net; do \
            gpg --keyserver $server --recv-keys \
              6A010C5166006599AA17F08146C2130DFD2497F5 && break; \
          done && \
          curl -sfSL -O https://yarnpkg.com/${YARN_VERSION}.tar.gz -O https://yarnpkg.com/${YARN_VERSION}.tar.gz.asc && \
          gpg --batch --verify ${YARN_VERSION}.tar.gz.asc ${YARN_VERSION}.tar.gz && \
          mkdir /usr/local/share/yarn && \
          tar -xf ${YARN_VERSION}.tar.gz -C /usr/local/share/yarn --strip 1 && \
          ln -s /usr/local/share/yarn/bin/yarn /usr/local/bin/ && \
          ln -s /usr/local/share/yarn/bin/yarnpkg /usr/local/bin/ && \
          rm ${YARN_VERSION}.tar.gz*; \
        fi; \
      fi

COPY fonts.tar.bz2 /tmp/fonts.tar.bz2
# COPY hello.js /tmp/hello.js

RUN mkdir -p /usr/share/fonts \
	&& tar -xjvf /tmp/fonts.tar.bz2 -C /usr/share/fonts

RUN apk update \
	&& apk upgrade \
	&& apk add --no-cache --virtual .build-deps3 curl ca-certificates openssl \
	&& apk add --update ca-certificates openssl \
	&& update-ca-certificates 2>/dev/null || true

RUN apk add --no-cache --virtual .build-deps4 \
		cairo cairo-dev cairomm cairomm-dev pixman pixman-dev \
		jpeg jpeg-dev libjpeg libjpeg-turbo libjpeg-turbo-dev libpng libpng-dev \
		pango pango-dev pangomm pangomm-dev giflib giflib-dev openssl-dev \
		xproto renderproto kbproto xextproto freetype freetype-dev fontconfig-dev \
		bison flex gperf icu-dev libc-dev  libx11-dev libxext-dev  krb5-dev krb5-libs \
		git build-base nodejs-dev perl ruby sqlite-dev \
		keyutils-libs libcom_err musl-dev libgpg-error nss-dev libgcc zlib expat \
		libssl1.0 libcrypto1.0 libgcrypt libgcrypt-dev libffi heimdal-libs paxctl \
		libldap libtasn1 librtmp libsasl cyrus-sasl-dev libidn fontconfig p11-kit \
		libcurl sqlite-libs gnutls gnutls-dev icu-libs \
	&& mkdir -p /root \
	&& node -v

RUN mkdir /tmp/phantomjs && cd /tmp/phantomjs
COPY dockerized-phantomjs.tar.gz /tmp/phantomjs/dockerized-phantomjs.tar.gz
RUN cd /tmp/phantomjs && tar -xf dockerized-phantomjs.tar.gz && rm dockerized-phantomjs.tar.gz \
        && chmod 755 /tmp/phantomjs/usr/local/bin/phantomjs \
        && cp /tmp/phantomjs/usr/local/bin/phantomjs /usr/bin/phantomjs

# RUN mkdir /tmp/phantomjs && cd /tmp/phantomjs \
#        && curl -Ls https://github.com/fgrehm/docker-phantomjs2/releases/download/v2.0.0-20150722/dockerized-phantomjs.tar.gz | tar xz \
#        && chmod 755 /tmp/phantomjs/usr/local/bin/phantomjs \
#        && cp /tmp/phantomjs/usr/local/bin/phantomjs /usr/bin/phantomjs
# RUN /usr/bin/phantomjs -v \
#        && /usr/bin/phantomjs /tmp/hello.js

COPY entrypoint.sh /sbin/entrypoint.sh
    
RUN npm config set registry https://registry.npm.taobao.org --global

RUN npm install --unsafe-perm -g node-gyp bower grunt-cli canvas@1.6.2 gulp-cli cordova-hot-code-push-cli pm2

RUN apk del .build-deps1 .build-deps2 .build-deps3 .build-deps4 \
    && npm cache clear --force 2>/dev/null || true \
    && chmod 755 /sbin/entrypoint.sh \
    && rm -rf /tmp/* /var/cache/apk/* /root/.gnupg /usr/lib/node_modules/npm/doc /usr/lib/node_modules/npm/html

EXPOSE 80
WORKDIR /wwwroot/htdocs/www
CMD ["/sbin/entrypoint.sh"]